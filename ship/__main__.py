#!/usr/bin/env python3

import logging
import os
import re
from typing import List

logging.basicConfig(level=logging.DEBUG)

get_name = re.compile(r'name\s*=\s*"([a-zA-Z_\-0-9]+)"')
get_key_val = re.compile(r'([a-zA-Z_\-0-9]+)\s*=\s*(.+)\s*')
get_unused = re.compile(r'\[\[patch\.unused]]\nname\s*=\s*"([a-zA-Z_\-0-9]+)"')
get_rel_path = re.compile(r'path\s*=\s*"(\./[a-zA-Z_\-0-9/]+)"')
get_abs_path = re.compile(r'(ABS_PATH\((.+)\))')


class Crate:
    def __init__(self, path: str):
        self.path = path
        self._name = None

    @property
    def cargo_toml(self):
        return os.path.join(self.path, "Cargo.toml")

    @property
    def cargo_lock(self):
        return os.path.join(self.path, "Cargo.lock")

    @property
    def src(self):
        return os.path.join(self.path, "src")

    @property
    def name(self):
        if self._name:
            return self._name
        with open(os.path.join(self.path, "Cargo.toml")) as f:
            content = f.read()
        self._name = get_name.findall(content)[0]
        return self._name


class Workspace:
    def __init__(self, path: str):
        self.path = path

    @property
    def patch_list(self):
        return os.path.join(self.path, "patches.toml")

    @property
    def workspace(self):
        return os.path.join(self.path, "workspace.toml")

    @property
    def cargo_toml(self):
        return os.path.join(self.path, "Cargo.toml")

    @property
    def cargo_lock(self):
        return os.path.join(self.path, "Cargo.lock")


def for_cargo_toml(collection, path):
    collection.append(Crate(path))


def for_workspace(collection, path):
    collection.append(Workspace(path))


class Exclude:
    def __init__(self, path: str):
        self.path = path

    @property
    def exclude_toml(self):
        return os.path.join(self.path, "exclude.toml")


def for_exclude(collection: List, path: str):
    collection.append(Exclude(path))


def for_prebuild(path):
    os.system(f"cd \"{path}\" && ./prebuild.sh")


def for_dir(collection: List, path: str):
    segs = os.path.split(path)
    if not os.path.isdir(path):
        return
    if segs[-1].endswith("target"):
        return
    if segs[-1].endswith("vendor"):
        return
    if segs[-1] != "." and segs[-1].startswith("."):
        return
    crate = Crate(path)
    if os.path.exists(crate.cargo_toml) \
            and os.path.exists(crate.src):
        for_cargo_toml(collection, path)
    if os.path.exists(Workspace(path).workspace):
        for_workspace(collection, path)
    if os.path.exists(os.path.join(path, "prebuild.sh")):
        for_prebuild(path)
    if os.path.exists(Exclude(path).exclude_toml):
        for_exclude(collection, path)
    for sub in os.listdir(path):
        path1 = os.path.join(path, sub)
        for_dir(collection, path1)

def has_startswith(path, l) -> bool:
    for p in l:
        if path.startswith(p):
            return True
    return False
def build_list(collection):
    d = {}
    exd = []
    for c in collection:
        if isinstance(c, Exclude):
            with open(c.exclude_toml) as f:
                for key, val in get_key_val.findall(f.read()):
                    if bool(val):
                        exd.append(os.path.join(c.path, key))

        if isinstance(c, Crate) and not has_startswith(c.path, exd):
            d[c.name] = f'{{ path = ABS_PATH({c.path}) }}'

        if isinstance(c, Workspace):
            if os.path.exists(c.patch_list):
                with open(c.patch_list, "r") as f:
                    doc = f.read()
                for pair in get_key_val.findall(doc):
                    path = pair[2]
                    for rel_path in get_rel_path.findall(pair[2]):
                        abs_path = f"ABS_PATH({os.path.join(c.path, rel_path)})"
                        path = path.replace(rel_path, abs_path)
                    d[pair[1]] = path
    return d


def generate_cargo_toml(patch_list, workspace: Workspace, exclude=None):
    if exclude is None:
        exclude = set()
    with open(workspace.cargo_toml, "w") as f:
        f.write("# Don't edit. This file is generated by ship.py\n")
        f.write(open(workspace.workspace, "r").read())
        f.write('\n[patch.crates-io]\n')
        for key, val in patch_list.items():
            if key not in exclude:
                for abs_path in get_abs_path.findall(val):
                    rel_path = f"\"{os.path.relpath(abs_path[1], workspace.path)}\""
                    val = val.replace(abs_path[0], rel_path)
                f.write(f"{key} = {val}\n")
        f.write("\n")


def main():
    collection = []
    for_dir(collection, os.path.abspath("."))
    patch_list = build_list(collection)

    for c in collection:
        if isinstance(c, Workspace):
            generate_cargo_toml(patch_list, c)
            os.system(f"cd \"{c.path}\" && cargo generate-lockfile 2> /dev/null")
            with open(c.cargo_lock, "r") as f:
                exclude = set(get_unused.findall(f.read()))

            generate_cargo_toml(patch_list, c, exclude)


if __name__ == "__main__":
    main()
